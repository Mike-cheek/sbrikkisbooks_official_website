{"ast":null,"code":"var _jsxFileName = \"/home/mike/Developing/sbrikkisbooks_official_website/src/atoms/imageMoving/imageMoving.jsx\";\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageMoving = () => {\n  const card = document.querySelector(\".card\");\n  const motionMatchMedia = window.matchMedia(\"(prefers-reduced-motion)\");\n  const THRESHOLD = 15;\n\n  function handleHover(e) {\n    const {\n      clientX,\n      clientY,\n      currentTarget\n    } = e;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetLeft,\n      offsetTop\n    } = currentTarget;\n    const horizontal = (clientX - offsetLeft) / clientWidth;\n    const vertical = (clientY - offsetTop) / clientHeight;\n    const rotateX = (THRESHOLD / 2 - horizontal * THRESHOLD).toFixed(2);\n    const rotateY = (vertical * THRESHOLD - THRESHOLD / 2).toFixed(2);\n    card.style.transform = `perspective(${clientWidth}px) rotateX(${rotateY}deg) rotateY(${rotateX}deg) scale3d(1, 1, 1)`;\n  }\n\n  function resetStyles(e) {\n    card.style.transform = `perspective(${e.currentTarget.clientWidth}px) rotateX(0deg) rotateY(0deg)`;\n  }\n\n  if (!motionMatchMedia.matches && card) {\n    card.addEventListener(\"mousemove\", handleHover);\n    card.addEventListener(\"mouseleave\", resetStyles);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    class: \"card\",\n    src: \"../../assets/gigi.png\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ImageMoving;\nexport default ImageMoving;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageMoving\");","map":{"version":3,"sources":["/home/mike/Developing/sbrikkisbooks_official_website/src/atoms/imageMoving/imageMoving.jsx"],"names":["React","useEffect","ImageMoving","card","document","querySelector","motionMatchMedia","window","matchMedia","THRESHOLD","handleHover","e","clientX","clientY","currentTarget","clientWidth","clientHeight","offsetLeft","offsetTop","horizontal","vertical","rotateX","toFixed","rotateY","style","transform","resetStyles","matches","addEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;AACA,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;AAEA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACpB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,OAAX;AAAoBC,MAAAA;AAApB,QAAsCH,CAA5C;AACA,UAAM;AAAEI,MAAAA,WAAF;AAAeC,MAAAA,YAAf;AAA6BC,MAAAA,UAA7B;AAAyCC,MAAAA;AAAzC,QAAuDJ,aAA7D;AAEA,UAAMK,UAAU,GAAG,CAACP,OAAO,GAAGK,UAAX,IAAyBF,WAA5C;AACA,UAAMK,QAAQ,GAAG,CAACP,OAAO,GAAGK,SAAX,IAAwBF,YAAzC;AACA,UAAMK,OAAO,GAAG,CAACZ,SAAS,GAAG,CAAZ,GAAgBU,UAAU,GAAGV,SAA9B,EAAyCa,OAAzC,CAAiD,CAAjD,CAAhB;AACA,UAAMC,OAAO,GAAG,CAACH,QAAQ,GAAGX,SAAX,GAAuBA,SAAS,GAAG,CAApC,EAAuCa,OAAvC,CAA+C,CAA/C,CAAhB;AACAnB,IAAAA,IAAI,CAACqB,KAAL,CAAWC,SAAX,GACK,eAAcV,WAAY,eAAcQ,OAAQ,gBAAeF,OAAQ,uBAD5E;AAEH;;AAED,WAASK,WAAT,CAAqBf,CAArB,EAAwB;AACpBR,IAAAA,IAAI,CAACqB,KAAL,CAAWC,SAAX,GACK,eAAcd,CAAC,CAACG,aAAF,CAAgBC,WAAY,iCAD/C;AAEH;;AAGD,MAAI,CAACT,gBAAgB,CAACqB,OAAlB,IAA6BxB,IAAjC,EAAuC;AACnCA,IAAAA,IAAI,CAACyB,gBAAL,CAAsB,WAAtB,EAAmClB,WAAnC;AACAP,IAAAA,IAAI,CAACyB,gBAAL,CAAsB,YAAtB,EAAoCF,WAApC;AACH;;AAED,sBACI;AAAK,IAAA,KAAK,EAAC,MAAX;AAAkB,IAAA,GAAG,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAhCD;;KAAMxB,W;AAkCN,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react'\n\nconst ImageMoving = () => {\n    const card = document.querySelector(\".card\");\n    const motionMatchMedia = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    const THRESHOLD = 15;\n\n    function handleHover(e) {\n        const { clientX, clientY, currentTarget } = e;\n        const { clientWidth, clientHeight, offsetLeft, offsetTop } = currentTarget;\n\n        const horizontal = (clientX - offsetLeft) / clientWidth;\n        const vertical = (clientY - offsetTop) / clientHeight;\n        const rotateX = (THRESHOLD / 2 - horizontal * THRESHOLD).toFixed(2);\n        const rotateY = (vertical * THRESHOLD - THRESHOLD / 2).toFixed(2);\n        card.style.transform =\n            `perspective(${clientWidth}px) rotateX(${rotateY}deg) rotateY(${rotateX}deg) scale3d(1, 1, 1)`;\n    }\n\n    function resetStyles(e) {\n        card.style.transform =\n            `perspective(${e.currentTarget.clientWidth}px) rotateX(0deg) rotateY(0deg)`;\n    }\n\n\n    if (!motionMatchMedia.matches && card) {\n        card.addEventListener(\"mousemove\", handleHover);\n        card.addEventListener(\"mouseleave\", resetStyles);\n    }\n\n    return (\n        <img class=\"card\" src=\"../../assets/gigi.png\"/>\n    )\n}\n\nexport default ImageMoving\n"]},"metadata":{},"sourceType":"module"}