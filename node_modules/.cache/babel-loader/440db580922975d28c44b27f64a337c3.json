{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/**\n * These hooks re-implement the now removed useBlocker and usePrompt hooks in 'react-router-dom'.\n * Thanks for the idea @piecyk https://github.com/remix-run/react-router/issues/8139#issuecomment-953816315\n * Source: https://github.com/remix-run/react-router/commit/256cad70d3fd4500b1abcfea66f3ee622fb90874#diff-b60f1a2d4276b2a605c05e19816634111de2e8a4186fe9dd7de8e344b65ed4d3L344-L381\n */\nimport { useContext, useEffect, useCallback } from 'react';\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom';\n/**\n * Blocks all navigation attempts. This is useful for preventing the page from\n * changing until some condition is met, like saving form data.\n *\n * @param  blocker\n * @param  when\n * @see https://reactrouter.com/api/useBlocker\n */\n\nexport function useBlocker(blocker) {\n  _s();\n\n  let when = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const {\n    navigator\n  } = useContext(NavigationContext);\n  useEffect(() => {\n    if (!when) return;\n    const unblock = navigator.block(tx => {\n      const autoUnblockingTx = { ...tx,\n\n        retry() {\n          // Automatically unblock the transition so it can play all the way\n          // through before retrying it. TODO: Figure out how to re-enable\n          // this block if the transition is cancelled for some reason.\n          unblock();\n          tx.retry();\n        }\n\n      };\n      blocker(autoUnblockingTx);\n    });\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n/**\n * Prompts the user with an Alert before they leave the current screen.\n *\n * @param  message\n * @param  when\n */\n\n_s(useBlocker, \"nMWwmJH5NtWAFUVW5Io2SiBn1EI=\");\n\nexport function usePrompt(message) {\n  _s2();\n\n  let when = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const blocker = useCallback(tx => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm(message)) tx.retry();\n  }, [message]);\n  useBlocker(blocker, when);\n}\n\n_s2(usePrompt, \"BVAdNYVvBPGf33Q9JKcjD1vkU34=\", false, function () {\n  return [useBlocker];\n});","map":{"version":3,"sources":["/home/mike/Developing/sbrikkisbooks_official_website/src/atoms/useBlocker.jsx"],"names":["useContext","useEffect","useCallback","UNSAFE_NavigationContext","NavigationContext","useBlocker","blocker","when","navigator","unblock","block","tx","autoUnblockingTx","retry","usePrompt","message","window","confirm"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACC,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,WAAhC,QAAmD,OAAnD;AACA,SAASC,wBAAwB,IAAIC,iBAArC,QAA8D,kBAA9D;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,OAAO,SAASC,UAAT,CAAqBC,OAArB,EAA4C;AAAA;;AAAA,MAAdC,IAAc,uEAAP,IAAO;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAgBR,UAAU,CAAEI,iBAAF,CAAhC;AAEAH,EAAAA,SAAS,CAAE,MAAM;AACb,QAAK,CAAEM,IAAP,EAAc;AAEd,UAAME,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAmBC,EAAF,IAAU;AACvC,YAAMC,gBAAgB,GAAG,EACrB,GAAGD,EADkB;;AAErBE,QAAAA,KAAK,GAAG;AACJ;AACA;AACA;AACAJ,UAAAA,OAAO;AACPE,UAAAA,EAAE,CAACE,KAAH;AACH;;AARoB,OAAzB;AAWAP,MAAAA,OAAO,CAAEM,gBAAF,CAAP;AACH,KAbe,CAAhB;AAeA,WAAOH,OAAP;AACH,GAnBQ,EAmBN,CAAED,SAAF,EAAaF,OAAb,EAAsBC,IAAtB,CAnBM,CAAT;AAoBH;AACD;AACD;AACA;AACA;AACA;AACA;;GA7BiBF,U;;AA8BhB,OAAO,SAASS,SAAT,CAAoBC,OAApB,EAA2C;AAAA;;AAAA,MAAdR,IAAc,uEAAP,IAAO;AAC9C,QAAMD,OAAO,GAAGJ,WAAW,CACrBS,EAAF,IAAU;AACN;AACA,QAAKK,MAAM,CAACC,OAAP,CAAgBF,OAAhB,CAAL,EAAiCJ,EAAE,CAACE,KAAH;AACpC,GAJsB,EAKvB,CAAEE,OAAF,CALuB,CAA3B;AAQAV,EAAAA,UAAU,CAAEC,OAAF,EAAWC,IAAX,CAAV;AACH;;IAVeO,S;UASZT,U","sourcesContent":["/**\n * These hooks re-implement the now removed useBlocker and usePrompt hooks in 'react-router-dom'.\n * Thanks for the idea @piecyk https://github.com/remix-run/react-router/issues/8139#issuecomment-953816315\n * Source: https://github.com/remix-run/react-router/commit/256cad70d3fd4500b1abcfea66f3ee622fb90874#diff-b60f1a2d4276b2a605c05e19816634111de2e8a4186fe9dd7de8e344b65ed4d3L344-L381\n */\n import { useContext, useEffect, useCallback } from 'react';\n import { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom';\n /**\n  * Blocks all navigation attempts. This is useful for preventing the page from\n  * changing until some condition is met, like saving form data.\n  *\n  * @param  blocker\n  * @param  when\n  * @see https://reactrouter.com/api/useBlocker\n  */\n export function useBlocker( blocker, when = true ) {\n     const { navigator } = useContext( NavigationContext );\n \n     useEffect( () => {\n         if ( ! when ) return;\n \n         const unblock = navigator.block( ( tx ) => {\n             const autoUnblockingTx = {\n                 ...tx,\n                 retry() {\n                     // Automatically unblock the transition so it can play all the way\n                     // through before retrying it. TODO: Figure out how to re-enable\n                     // this block if the transition is cancelled for some reason.\n                     unblock();\n                     tx.retry();\n                 },\n             };\n \n             blocker( autoUnblockingTx );\n         } );\n \n         return unblock;\n     }, [ navigator, blocker, when ] );\n }\n /**\n  * Prompts the user with an Alert before they leave the current screen.\n  *\n  * @param  message\n  * @param  when\n  */\n export function usePrompt( message, when = true ) {\n     const blocker = useCallback(\n         ( tx ) => {\n             // eslint-disable-next-line no-alert\n             if ( window.confirm( message ) ) tx.retry();\n         },\n         [ message ]\n     );\n \n     useBlocker( blocker, when );\n }"]},"metadata":{},"sourceType":"module"}